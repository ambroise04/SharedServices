// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SharedServices.DAL;

namespace SharedServices.DAL.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SharedServices.DAL.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Point")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PostalCode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("Start")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("SharedServices.DAL.Entities.ApplicationUserServices", b =>
                {
                    b.Property<int>("ServiceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("TEXT");

                    b.HasKey("ServiceId", "ApplicationUserId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("ApplicationUserServices");
                });

            modelBuilder.Entity("SharedServices.DAL.Entities.Discussion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateHour")
                        .HasColumnType("TEXT");

                    b.Property<string>("Emitter")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Receiver")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Discussions");
                });

            modelBuilder.Entity("SharedServices.DAL.Entities.FaqQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("FaqQuestions");
                });

            modelBuilder.Entity("SharedServices.DAL.Entities.FaqResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("FaqResponses");
                });

            modelBuilder.Entity("SharedServices.DAL.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Advisor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<bool>("DisplayAdvisorName")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Mark")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("SharedServices.DAL.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CorrespondentId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfAddition")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsTriggered")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RequestId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RequestMulticastId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CorrespondentId");

                    b.HasIndex("RequestId");

                    b.HasIndex("RequestMulticastId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("SharedServices.DAL.Entities.NotificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("MessageEN")
                        .HasColumnType("TEXT");

                    b.Property<string>("MessageFR")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("NotificationTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MessageEN = "Your correspondent has marked a service as rendered. Your confirmation is required for the transfer of points.",
                            MessageFR = "Votre correspondant a marqué un service comme rendu. Veuillez donner votre accord pour le transfert des points.",
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            MessageEN = "Your correspondent has marked a service as rendered. Please accept the transfer of points.",
                            MessageFR = "Votre correspondant a marqué un service comme rendu. Veuillez accepter le transfert des points",
                            Type = 1
                        },
                        new
                        {
                            Id = 3,
                            MessageEN = "New response to your request. Consult the list of requests ?",
                            MessageFR = "Une nouvelle réponse a votre demande a été envoyée. Consulter la liste des demandes ?",
                            Type = 2
                        },
                        new
                        {
                            Id = 4,
                            MessageEN = "A new request has been published. Do you want to know more ?",
                            MessageFR = "Une nouvelle demande a été publiée. Voulez-vous en savoir plus ?",
                            Type = 3
                        });
                });

            modelBuilder.Entity("SharedServices.DAL.Entities.Picture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("SharedServices.DAL.Entities.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<int>("PostalCode")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("SharedServices.DAL.Entities.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateOfAddition")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfRequest")
                        .HasColumnType("TEXT");

                    b.Property<int>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PlaceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Point")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReceiverId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ReceiverValidation")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RequesterId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("RequesterValidation")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ServiceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Source")
                        .HasColumnType("INTEGER");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("RequesterId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("SharedServices.DAL.Entities.RequestMulticast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Accepted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateOfAddition")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfRequest")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PlaceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Point")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RequesterMulticastId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ServiceId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.HasIndex("RequesterMulticastId");

                    b.HasIndex("ServiceId");

                    b.ToTable("RequestMulticasts");
                });

            modelBuilder.Entity("SharedServices.DAL.Entities.ResponseMulticastRequest", b =>
                {
                    b.Property<int>("RequestMulticastId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Choosen")
                        .HasColumnType("INTEGER");

                    b.HasKey("RequestMulticastId", "ApplicationUserId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("ResponseMulticastRequest");
                });

            modelBuilder.Entity("SharedServices.DAL.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("GroupId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Garder les enfants, les amuser le temps que les parents reviennent.",
                            GroupId = 4,
                            Title = "Garde d'enfant"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Garder les grands-parents, les aider et leur faire rire.",
                            GroupId = 4,
                            Title = "Garde de personnes agées"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Vous aider à déplacer vos meubles et autres.",
                            GroupId = 1,
                            Title = "Aide déménagement"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Habitué des meubles, je peux vous aider à monter les vôtres.",
                            GroupId = 3,
                            Title = "Montage de meubles en kit"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Fan des animaux, j'adore les garder et les promener",
                            GroupId = 5,
                            Title = "Garde d'animaux"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Je peux vous aider à faire les finitions",
                            GroupId = 3,
                            Title = "Maçonnerie"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Aide à la décoration pour vos événements.",
                            GroupId = 3,
                            Title = "Décoration"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Garder les enfants, les amuser le temps que les parents reviennent",
                            GroupId = 2,
                            Title = "Tondre une pelouse"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Rendre la clôture de vos maisons belle et attirante.",
                            GroupId = 2,
                            Title = "Tondre une haie"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Vous aider dans vos différentes tâches ménagères.",
                            GroupId = 7,
                            Title = "Aide ménagère"
                        },
                        new
                        {
                            Id = 11,
                            Description = "Repasser vos linges.",
                            GroupId = 7,
                            Title = "Repassage"
                        });
                });

            modelBuilder.Entity("SharedServices.DAL.Entities.ServiceGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PointsByHour")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ServiceGroups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PointsByHour = 15,
                            Title = "Déménagement"
                        },
                        new
                        {
                            Id = 2,
                            PointsByHour = 15,
                            Title = "Jardinage"
                        },
                        new
                        {
                            Id = 3,
                            PointsByHour = 15,
                            Title = "Bricolage"
                        },
                        new
                        {
                            Id = 4,
                            PointsByHour = 15,
                            Title = "Babysitting"
                        },
                        new
                        {
                            Id = 5,
                            PointsByHour = 15,
                            Title = "Animaux"
                        },
                        new
                        {
                            Id = 6,
                            PointsByHour = 15,
                            Title = "Cours particuliers"
                        },
                        new
                        {
                            Id = 7,
                            PointsByHour = 15,
                            Title = "Tâches ménagères"
                        },
                        new
                        {
                            Id = 8,
                            PointsByHour = 15,
                            Title = "Informatique"
                        },
                        new
                        {
                            Id = 9,
                            PointsByHour = 15,
                            Title = "Soins et Beauté"
                        },
                        new
                        {
                            Id = 10,
                            PointsByHour = 15,
                            Title = "Evénements"
                        },
                        new
                        {
                            Id = 11,
                            PointsByHour = 15,
                            Title = "Entretien"
                        },
                        new
                        {
                            Id = 12,
                            PointsByHour = 15,
                            Title = "Courses et Démarches"
                        });
                });

            modelBuilder.Entity("SharedServices.DAL.Entities.UserSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<string>("Hostname")
                        .HasColumnType("TEXT");

                    b.Property<string>("Ip")
                        .HasColumnType("TEXT");

                    b.Property<string>("Loc")
                        .HasColumnType("TEXT");

                    b.Property<string>("Org")
                        .HasColumnType("TEXT");

                    b.Property<string>("Postal")
                        .HasColumnType("TEXT");

                    b.Property<string>("Region")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SessionDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("UserSessions");
                });

            modelBuilder.Entity("SharedServices.Mutual.GlobalInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AddressEN")
                        .HasColumnType("TEXT");

                    b.Property<string>("AddressFR")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AuthorLink")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DefaultPointForUsers")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DescriptionEN")
                        .HasColumnType("TEXT");

                    b.Property<string>("DescriptionFR")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Infos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressEN = "Place Cardinal Mercier, 2 Wavre Belgium",
                            AddressFR = "Place Cardinal Mercier, 2 Wavre Belgique",
                            AuthorLink = "https://www.labak.azurewebsites.net",
                            DefaultPointForUsers = 10,
                            DescriptionEN = "Description of this platform",
                            DescriptionFR = "Description de cette plateforme",
                            Email = "labakoam@gmail.com",
                            Phone = "+32 (0)494 68 00 38"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SharedServices.DAL.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SharedServices.DAL.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedServices.DAL.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SharedServices.DAL.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SharedServices.DAL.ApplicationUser", b =>
                {
                    b.HasOne("SharedServices.DAL.ApplicationUser", null)
                        .WithMany("Contacts")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("SharedServices.DAL.Entities.ApplicationUserServices", b =>
                {
                    b.HasOne("SharedServices.DAL.ApplicationUser", "User")
                        .WithMany("UserServices")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedServices.DAL.Entities.Service", "Service")
                        .WithMany("UserServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SharedServices.DAL.Entities.Discussion", b =>
                {
                    b.HasOne("SharedServices.DAL.ApplicationUser", null)
                        .WithMany("Discussions")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("SharedServices.DAL.Entities.FaqQuestion", b =>
                {
                    b.HasOne("SharedServices.DAL.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("SharedServices.DAL.Entities.FaqResponse", b =>
                {
                    b.HasOne("SharedServices.DAL.Entities.FaqQuestion", "Question")
                        .WithMany("Responses")
                        .HasForeignKey("QuestionId");
                });

            modelBuilder.Entity("SharedServices.DAL.Entities.Feedback", b =>
                {
                    b.HasOne("SharedServices.DAL.ApplicationUser", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("SharedServices.DAL.Entities.Notification", b =>
                {
                    b.HasOne("SharedServices.DAL.ApplicationUser", "Correspondent")
                        .WithMany()
                        .HasForeignKey("CorrespondentId");

                    b.HasOne("SharedServices.DAL.Entities.Request", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId");

                    b.HasOne("SharedServices.DAL.Entities.RequestMulticast", "RequestMulticast")
                        .WithMany()
                        .HasForeignKey("RequestMulticastId");

                    b.HasOne("SharedServices.DAL.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId");

                    b.HasOne("SharedServices.DAL.Entities.NotificationType", "Type")
                        .WithMany("Notifications")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedServices.DAL.ApplicationUser", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("SharedServices.DAL.Entities.Picture", b =>
                {
                    b.HasOne("SharedServices.DAL.ApplicationUser", "User")
                        .WithOne("Picture")
                        .HasForeignKey("SharedServices.DAL.Entities.Picture", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SharedServices.DAL.Entities.Request", b =>
                {
                    b.HasOne("SharedServices.DAL.Entities.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId");

                    b.HasOne("SharedServices.DAL.ApplicationUser", "Receiver")
                        .WithMany("RequestsReceived")
                        .HasForeignKey("ReceiverId");

                    b.HasOne("SharedServices.DAL.ApplicationUser", "Requester")
                        .WithMany("RequestsSent")
                        .HasForeignKey("RequesterId");

                    b.HasOne("SharedServices.DAL.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SharedServices.DAL.Entities.RequestMulticast", b =>
                {
                    b.HasOne("SharedServices.DAL.Entities.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId");

                    b.HasOne("SharedServices.DAL.ApplicationUser", "RequesterMulticast")
                        .WithMany("RequestMulticasts")
                        .HasForeignKey("RequesterMulticastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedServices.DAL.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SharedServices.DAL.Entities.ResponseMulticastRequest", b =>
                {
                    b.HasOne("SharedServices.DAL.ApplicationUser", "Responder")
                        .WithMany("Responses")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedServices.DAL.Entities.RequestMulticast", "RequestMulticast")
                        .WithMany("Responses")
                        .HasForeignKey("RequestMulticastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SharedServices.DAL.Entities.Service", b =>
                {
                    b.HasOne("SharedServices.DAL.Entities.ServiceGroup", "Group")
                        .WithMany("Services")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
